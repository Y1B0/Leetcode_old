class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        if (beginWord == null || endWord == null || wordList == null) return 0;
        // if (beginWord.equals(endWord)) return 1;
        Set<String> wordSet = new HashSet<>();
        for(String word: wordList){
            wordSet.add(word);
        }
        int level = 1;
        Queue<String> queue = new LinkedList<>();
        queue.offer(beginWord);
        while (!queue.isEmpty()){
            int size = queue.size();
            for (int i = 0; i < size; i++){ //i pieces of items in the same level
                String cur = queue.poll();
                
                for (int j = 0; j < cur.length(); j++){ //j is the index in chars
                	char[] chars = cur.toCharArray();
                    for (char c = 'a'; c <= 'z'; c++){ //replace char[j] with c
                        chars[j] = c;
                        String str = new String(chars);
                        if (wordSet.contains(str)){
                            if (str.equals(endWord)) return level + 1;
                            wordSet.remove(str);
                            queue.offer(str);
                        }
                    }
                }
            }
            level++;
        }
        return 0;
            
    }
}
